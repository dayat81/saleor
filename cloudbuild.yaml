# Google Cloud Build configuration for Saleor
# This file defines the CI/CD pipeline for automated deployment

steps:
  # Step 1: Build the main application image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-app'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.cloudrun'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:$SHORT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:latest'
      - '.'
    env:
      - 'DOCKER_BUILDKIT=1'

  # Step 2: Build the worker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-worker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.worker'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:$SHORT_SHA'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:latest'
      - '.'
    env:
      - 'DOCKER_BUILDKIT=1'

  # Step 3: Push main application image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-app'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor'
    waitFor: ['build-app']

  # Step 4: Push worker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-worker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker'
    waitFor: ['build-worker']

  # Step 5: Run database migrations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'migrate-db'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create temporary migration job
        MIGRATION_JOB="saleor-migration-${SHORT_SHA}"
        
        gcloud run jobs create $$MIGRATION_JOB \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:$SHORT_SHA \
          --region=${_REGION} \
          --memory=1Gi \
          --cpu=1 \
          --task-count=1 \
          --parallelism=1 \
          --command=python \
          --args="manage.py,migrate" \
          --vpc-connector=${_VPC_CONNECTOR} \
          --add-cloudsql-instances=${_CLOUD_SQL_INSTANCE} \
          --set-env-vars="DATABASE_URL=${_DATABASE_URL},REDIS_URL=${_REDIS_URL},SECRET_KEY=${_SECRET_KEY}" \
          --service-account=${_SERVICE_ACCOUNT} \
          --quiet
        
        # Execute migration
        gcloud run jobs execute $$MIGRATION_JOB \
          --region=${_REGION} \
          --wait \
          --quiet
        
        # Clean up migration job
        gcloud run jobs delete $$MIGRATION_JOB \
          --region=${_REGION} \
          --quiet
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
    waitFor: ['push-app']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'deploy-app'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:$SHORT_SHA'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--timeout=900'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--concurrency=200'
      - '--vpc-connector=${_VPC_CONNECTOR}'
      - '--add-cloudsql-instances=${_CLOUD_SQL_INSTANCE}'
      - '--service-account=${_SERVICE_ACCOUNT}'
      - '--set-env-vars=DATABASE_URL=${_DATABASE_URL},REDIS_URL=${_REDIS_URL},CELERY_BROKER_URL=${_REDIS_URL},GS_PROJECT_ID=$PROJECT_ID,GS_BUCKET_NAME=${_STATIC_BUCKET},GS_MEDIA_BUCKET_NAME=${_MEDIA_BUCKET},GS_MEDIA_PRIVATE_BUCKET_NAME=${_PRIVATE_BUCKET},PUBLIC_URL=${_PUBLIC_URL},ALLOWED_HOSTS=${_ALLOWED_HOSTS},ALLOWED_CLIENT_HOSTS=${_ALLOWED_CLIENT_HOSTS},EMAIL_URL=${_EMAIL_URL},DEBUG=False,PLAYGROUND_ENABLED=${_PLAYGROUND_ENABLED}'
      - '--set-secrets=SECRET_KEY=${_SECRET_KEY_SECRET}:latest'
      - '--quiet'
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
    waitFor: ['migrate-db']

  # Step 7: Update worker job
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'deploy-worker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Try to update existing job, create if it doesn't exist
        gcloud run jobs replace \
          ${_WORKER_JOB_NAME} \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:$SHORT_SHA \
          --region=${_REGION} \
          --memory=1Gi \
          --cpu=1 \
          --parallelism=${_WORKER_PARALLELISM} \
          --vpc-connector=${_VPC_CONNECTOR} \
          --add-cloudsql-instances=${_CLOUD_SQL_INSTANCE} \
          --service-account=${_SERVICE_ACCOUNT} \
          --set-env-vars="DATABASE_URL=${_DATABASE_URL},REDIS_URL=${_REDIS_URL},CELERY_BROKER_URL=${_REDIS_URL},GS_PROJECT_ID=$PROJECT_ID,GS_BUCKET_NAME=${_STATIC_BUCKET},GS_MEDIA_BUCKET_NAME=${_MEDIA_BUCKET},GS_MEDIA_PRIVATE_BUCKET_NAME=${_PRIVATE_BUCKET}" \
          --set-secrets="SECRET_KEY=${_SECRET_KEY_SECRET}:latest" \
          --quiet || \
        gcloud run jobs create ${_WORKER_JOB_NAME} \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:$SHORT_SHA \
          --region=${_REGION} \
          --memory=1Gi \
          --cpu=1 \
          --parallelism=${_WORKER_PARALLELISM} \
          --vpc-connector=${_VPC_CONNECTOR} \
          --service-account=${_SERVICE_ACCOUNT} \
          --set-env-vars="DATABASE_URL=${_DATABASE_URL},REDIS_URL=${_REDIS_URL},CELERY_BROKER_URL=${_REDIS_URL},GS_PROJECT_ID=$PROJECT_ID,GS_BUCKET_NAME=${_STATIC_BUCKET},GS_MEDIA_BUCKET_NAME=${_MEDIA_BUCKET},GS_MEDIA_PRIVATE_BUCKET_NAME=${_PRIVATE_BUCKET}" \
          --set-secrets="SECRET_KEY=${_SECRET_KEY_SECRET}:latest" \
          --quiet
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
    waitFor: ['push-worker']

  # Step 8: Run health check
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    args:
      - '-f'
      - '${_PUBLIC_URL}/health/'
    waitFor: ['deploy-app']

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  substitutionOption: 'ALLOW_LOOSE'
  logging: 'CLOUD_LOGGING_ONLY'
  logStreamingOption: 'STREAM_ON'

# Substitution variables (can be overridden in trigger)
substitutions:
  # Infrastructure
  _REGION: 'us-central1'
  _ARTIFACT_REGISTRY_REPO: 'saleor'
  _VPC_CONNECTOR: 'saleor-connector'
  _SERVICE_ACCOUNT: 'saleor-cloud-run@${PROJECT_ID}.iam.gserviceaccount.com'
  
  # Application
  _SERVICE_NAME: 'saleor-app'
  _WORKER_JOB_NAME: 'saleor-worker'
  _MAX_INSTANCES: '100'
  _WORKER_PARALLELISM: '10'
  
  # Storage
  _STATIC_BUCKET: 'saleor-static-${PROJECT_ID}'
  _MEDIA_BUCKET: 'saleor-media-${PROJECT_ID}'
  _PRIVATE_BUCKET: 'saleor-private-${PROJECT_ID}'
  
  # Configuration
  _PUBLIC_URL: 'https://api.example.com'
  _ALLOWED_HOSTS: 'api.example.com'
  _ALLOWED_CLIENT_HOSTS: 'example.com,www.example.com'
  _EMAIL_URL: 'console://'
  _PLAYGROUND_ENABLED: 'False'
  
  # Cloud SQL
  _CLOUD_SQL_INSTANCE: 'melodic-now-463704-k1:us-central1:saleor-db-demo'
  
  # Secrets (reference to Secret Manager)
  _SECRET_KEY_SECRET: 'saleor-django-secret-key'
  _DATABASE_URL: 'postgresql://saleor:secure-db-password-123@/saleor?host=/cloudsql/melodic-now-463704-k1:us-central1:saleor-db-demo'
  _REDIS_URL: 'redis://host:6379/0'

# Build timeout
timeout: '1800s'

# Build tags for organization
tags:
  - 'saleor'
  - 'cloud-run'
  - 'serverless'

# Artifacts to store
artifacts:
  images:
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:$SHORT_SHA'
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor:latest'
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:$SHORT_SHA'
    - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/saleor-worker:latest'